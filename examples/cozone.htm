<!DOCTYPE HTML>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cozone</title>
    <link rel="stylesheet" href="/src/css/pannellum.css"/>
    <link rel ="stylesheet" href = "/examples/loading.css" />
 
    <!-- <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/pannellum@2.5.6/build/pannellum.js"></script> -->
    <script type="text/javascript" src="/src/js/libpannellum.js"></script>
    <script type="text/javascript" src="/src/js/pannellum.js"></script>

    <style>
    #panorama {
        width: 100%;
        height: 100%;
        position:absolute;
    }
    html {
        overflow:hidden;
    }
    body {
        margin:0px;
    }
     #controls {
        position: absolute;
        bottom: 0;
        z-index: 2;
        text-align: center;
        width: 100%;
        padding-bottom: 3px;
    }
    .ctrl {
        padding: 8px 5px;
        width: 30px;
        text-align: center;
        background: rgba(200, 200, 200, 0.8);
        display: inline-block;
        cursor: pointer;
    }
    .ctrl:hover {
        background: rgba(200, 200, 200, 1);
    }



    </style>



</head>
<body>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>


<script src="/src/js/progressbar.js"></script>
<!-- <input type="radio" name="foo" value="1080p" checked> 1080p </input>
<input type="radio" name="foo" value="2160p"> 2160p </input> -->
<div id="panorama">
   
    <div id="controls">
        <div class="ctrl" id="pan-up">&#9650;</div>
        <div class="ctrl" id="pan-down">&#9660;</div>
        <div class="ctrl" id="pan-left">&#9668;</div>
        <div class="ctrl" id="pan-right">&#9658;</div>
    </div>

</div>
<!-- <div id = "ringloader" class="ring">Loading
    <span></span>
</div> -->
<div id="container" class = "ring"><span></span>
</div>


</div>
<script>



var viewer = pannellum.viewer('panorama', { 'scenes': {}, 'autoLoad': true, 'showFullscreenCtrl': true, 'showZoomCtrl': true } );

const pitch_thres = 180/6;
const yaw_thres = 180/8;
const length = 22;
const width = 42;
const height = 2;
const area = length * width;
const volume = length * width * height;
var index = 1200;
var h = Math.floor(index / area);
var basepath = "/examples/media/cozone360_frames_2160p_v2";
var pitch = 0, yaw = 0, hfov = 100;
var cacheName = 'cozone_foto'; 
var cnt = 0;

$('input[type=radio]').change(function() {
   h = 0;
   removeScenes()
   addScenes(this.value);

});

window.onload = function onLoad() {
var bar = new ProgressBar.Circle("#container", {
  color: '#aaa',
  // This has to be the same size as the maximum width to
  // prevent clipping
  strokeWidth: 4,
  trailWidth: 0,
  easing: 'easeInOut',
  duration: 60000,
  text: {
    autoStyleContainer: false
  },
  from: { color: '#aaa', width: 1 },
  to: { color: '#333', width: 4 },
  // Set default step function for all animate calls
  step: function(state, circle) {
    circle.path.setAttribute('stroke', state.color);
    circle.path.setAttribute('stroke-width', state.width);
 
    //var value = Math.round(circle.value() * 100);
    var value = Math.round(cnt*100/totalVolume);
    if (value === 0) {
      circle.setText('');
    } else {
      circle.setText(value);
    }

  }
});
bar.text.style.fontFamily = '"Raleway", Helvetica, sans-serif';
bar.text.style.fontSize = '2rem';

bar.animate(1.0);  // Number from 0.0 to 1.0

} 



function addScenes(){
   
    for (let i = 0 ; i < volume; i++){

        viewer.addScene(`${i}`, {
        "type": "equirectangular",
        "panorama": `${basepath}/${i}.jpg`

        });

    }
   
  //  setTimeout (()=> {
        viewer.loadScene(`${index}`);
  //  ,10);
    
}


function removeScenes(){
    for (let i = 0 ; i < volume; i++){
        const res = viewer.removeScene(`${i}`);
       // console.log(res);

    }



}


addScenes();




function createLineY(ind, incr) {
   // let arr = new Set();
    let arr = [];
    
    
    for (let i = ind  ; i <= ind + incr ; i++){
        if ((i+1) % length == 0) {
            arr.push(`${basepath}/${i}.jpg`);
            break;
        }
        arr.push(`${basepath}/${i}.jpg`);

    }

    for (let i = ind ; i >= ind - incr ; i--){
        if (i % length == 0) {
            arr.push(`${basepath}/${i}.jpg`);
            break;
        }
        //if (i % length == 0) break;
        arr.push(`${basepath}/${i}.jpg`);
    }

    return arr;

}



function createAreaXY(ind, incr, k) {
    //let arr=new Set();
    let arr = [];
    for (let i = ind  ; i <= ind + incr*length ; i+=length){

        if (i >= ( k + 1) * area ) break;
       // if (i < ( k + 1) * area ) 
       // arr =  new Set([...createLineY(i, incr), ...arr]);
       arr= arr.concat(createLineY(i, incr)).unique();
    }

    for (let i = ind  ; i >= ind - incr*length ; i-=length){
        if (i <  k * area ) break;
       // if (i >=  k * area ) 
        // arr = new Set([...createLineY(i, incr), ...arr]);
        arr= arr.concat(createLineY(i, incr)).unique();
    }

    return arr;
}


function createVolumeXYZ(ind, incr, k) {
   // let arr=new Set();
   let arr=[];
   
    let kk = k;
    for (let i = ind ; i <= ind + incr*area ; i+=area, kk++){
       // if (i < volume && kk < height) 
         if (i >= volume || kk >= height) break;
            // arr =  new Set([...createAreaXY(i, incr, kk), ...arr]);
           arr = arr.concat(createAreaXY(i, incr, kk)).unique();
    }
    for (let i = ind  ; i >= ind - incr*area ; i-=area, k--){
        //if (i >= 0 && k >= 0) 
         if (i < 0 || k < 0) break;
        // arr =  new Set([...createAreaXY(i, incr, k), ...arr]);
          arr = arr.concat(createAreaXY(i, incr, k)).unique();
    }


    return arr;
}

Array.prototype.unique = function() {
    var a = this.concat();
    for(var i=0; i<a.length; ++i) {
        for(var j=i+1; j<a.length; ++j) {
            if(a[i] === a[j])
                a.splice(j--, 1);
        }
    }

    return a;
};




async function addToCache(array) {

    for (const el of array) {
        await caches.open(cacheName).then( cache => {
           cache.add(el).then( () => {
            console.log("Data cached ")
            });
        });

    }

}

async function addToCache2(array) {
    
    for (const el of array) {
        let pr1 = await caches.open(cacheName);
        let pr2 = await  pr1.add(el);
        cnt++;
        console.log("data cached:", cnt);
     
    }
   
}

async function addSingleToCache (el) {

       let pr1 = await caches.open(cacheName);
        let pr2 = await  pr1.add(el);
        console.log("data cached");

}

async function addAndReadFromCache(el) {
        let pr = await addSingleToCache(el);
        let pr1 = await caches.open(cacheName);
        let pr2 = await  pr1.match(el);
        let pr3 = await pr2.blob();
        return pr3;

}

async function readFromCache(el) {
        let pr1 = await caches.open(cacheName);
        let pr2 = await  pr1.match(el);
        let pr3 = await pr2.blob();
        return pr3;

}

// function readFromCache(el) {
//     let pr = new Promise( (resolve, reject ) => {
//         caches.open(cacheName).then(cache => {
//             cache.match(el).then(image => {
//                 image.blob().then(res=> {
//                     ///console.log(res);
//                     resolve(res);
//                 });
        
//             });
//         });
//     });
//     return pr;
// }


function calculateVolumeXYZ(ind, incr) {

    var h_plus = ind + area*incr > volume ? height - h -1: incr;
    var h_minus = ind - area*incr < 0  ? h:  incr;
    var hh = h_minus + h_plus + 1;

    var l_plus = ind % length + incr >= length ? length - ind % length-1: incr;
    var l_minus = ind % length - incr < 0 ? ind % length: incr;
    var ll = l_minus + l_plus + 1;

    var w_plus = ind + incr * length > ( h + 1) * area ? width - Math.ceil((ind % area)/length) :incr
    var w_minus = ind - incr * length < ( h ) * area ? Math.ceil((ind % area)/length) :incr;
    var ww = w_minus + w_plus + 1 ; 

    // var h = 2*incr + 1 > height ? height: 2*incr + 1;
    // var w = 2*incr + 1 > width ? width: 2*incr + 1;
    // var l = 2*incr + 1 > length ? length: 2*incr + 1;

    
    
    

    return hh*ww*ll;

}
var totalVolume = calculateVolumeXYZ(index, 2);
console.log(totalVolume);
let array= createVolumeXYZ(index, 2, h);

//console.log(array);

(async function () {
     try {
       showSpinner();
       await addToCache2(array);
     } catch (err) {
       console.error(err);
     } finally {
        hideSpinner()
     }
})();



(async function(){
        // addToCache2(array);
        try {
            let res = await readFromCache(`${basepath}/${index}.jpg`);
            loadScene(res);
        } catch (error) {
            //console.error('error occured: ', error.message);
            let res = await addAndReadFromCache(`${basepath}/${index}.jpg`);
            loadScene(res);
        } 
        
    })();

// readFromCache(`${basepath}/${index}.jpg`).then((res)=>{
//     loadScene(res);  
// });

window.addEventListener('keydown', function(event) {

  //  console.log(pitch, yaw);

    var key = findKey(pitch, yaw + 90, event.key);
    console.log(key);

    switch (key) {
        case "j":
            {               
                
                const tmp = index - length;
                index = tmp < h * area ? index: tmp; 
                

            } 
                
            break;

        case "l":
            {
                const tmp = index + length;
                index = tmp >= ( h + 1) * area ? index: tmp;
              
            }

            break;

        case "i":
            {
                const tmp = index + 1;  
                index = tmp % length == 0 ? index: tmp;
               
               
            }
            break;

        case "k":
            {
                const tmp = index - 1;  
                index = (tmp + 1) % length == 0 ? index: tmp;
               
         
            }

            break;

        case "u":
            {
                h++;
                const tmp = index + area;
                if (h < height) index = tmp;
                else h = height -1;
                
            
            }
            break;

        case "h":
            {
                h--;
                const tmp = index - area;
                if (h < 0) h = 0;
                else index = tmp;
                


            }

            break;

        case "li":
            {
                let tmp = index + length;
                index = tmp >= ( h + 1) * area ? index: tmp;
                tmp = index + 1;  
                index = tmp % length == 0 ? index: tmp;
                


            }
            break;

        case "ij":
            {
                let tmp = index - length;
                index = tmp < h * area ? index: tmp; 
                tmp = index + 1;  
                index = tmp % length == 0 ? index: tmp;
          
                
            }
            break;

        case "jk": 
            {
                let tmp = index - length;
                index = tmp < h * area ? index: tmp; 
                tmp = index - 1;  
                index = (tmp + 1) % length == 0 ? index: tmp;
              

            }
            break;

        case "kl":
            {

                let tmp = index + length;
                index = tmp >= ( h + 1) * area ? index: tmp;
                tmp = index - 1;  
                index = (tmp + 1) % length == 0 ? index: tmp;
               

            }
            break;

        case "ui":
            {
                
                
                let tmp = index + 1;  
                index = tmp % length == 0 ? index: tmp;
                h++;
                tmp = index + area;
                if (h < height) index = tmp;
                else h = height -1;
          


            }
            break;
        
        case "hk":
            {
                let tmp = index - 1;  
                index = (tmp + 1) % length == 0 ? index: tmp;
                h--;
                tmp = index - area;
                if (h < 0) h = 0;
                else index = tmp;
          



            }
            break;

        case "hi":
            {
                
                let tmp = index + 1;  
                index = tmp % length == 0 ? index: tmp;
                h--;
                tmp = index - area;
                if (h < 0) h = 0;
                else index = tmp;
           

            }
            break;
        
        case "uk": 
            {
                let tmp = index - 1;  
                index = (tmp + 1) % length == 0 ? index: tmp;
                h++;
                tmp = index + area;
                if (h < height) index = tmp;
                else h = height -1;
             

            }
            break;
        
        case "ul":
            {
                let tmp = index + length;
                index = tmp >= ( h + 1) * area ? index: tmp;
                h++;
                tmp = index + area;
                if (h < height) index = tmp;
                else h = height -1;
            

            } 
            break; 

        case "hj":
            {

                let tmp = index - length;
                index = tmp < h * area ? index: tmp;  
                h--;
                tmp = index - area;
                if (h < 0) h = 0;
                else index = tmp;
             

            }
            break;

        case "hl":

            {
                let tmp = index + length;
                index = tmp >= ( h + 1) * area ? index: tmp;
                h--;
                tmp = index - area;
                if (h < 0) h = 0;
                else index = tmp;
              

            }
            break;
        
        case "uj": 
            {
                let tmp = index - length;
                index = tmp < h * area ? index: tmp; 
                h++;
                tmp = index + area;
                if (h < height) index = tmp;
                else h = height -1;
              
            }
            break;

        case "uli":
            {

                let tmp = index + length;
                index = tmp >= ( h + 1) * area ? index: tmp;
                tmp = index + 1;  
                index = tmp % length == 0 ? index: tmp;
                h++;
                tmp = index + area;
                if (h < height) index = tmp;
                else h = height -1;
          
            }
            break;

        case "hjk":
            {

                let tmp = index - length;
                index = tmp < h * area ? index: tmp; 
                tmp = index - 1;  
                index = (tmp + 1) % length == 0 ? index: tmp;
                h--;
                tmp = index - area;
                if (h < 0) h = 0;
                else index = tmp;
           
            }
            break;
        
        case "hli":
            {
                let tmp = index + length;
                index = tmp >= ( h + 1) * area ? index: tmp;
                tmp = index + 1;  
                index = tmp % length == 0 ? index: tmp;
                h--;
                tmp = index - area;
                if (h < 0) h = 0;
                else index = tmp;

            }
            break;

        case "ujk":
            {

                let tmp = index - length;
                index = tmp < h * area ? index: tmp; 
                tmp = index - 1;  
                index = (tmp + 1) % length == 0 ? index: tmp;
                h++;
                tmp = index + area;
                if (h < height) index = tmp;
                else h = height -1;
           
            }
            break;
        
        
        case "ukl":
            {
                let tmp = index + length;
                index = tmp >= ( h + 1) * area ? index: tmp;
                tmp = index - 1;  
                index = (tmp + 1) % length == 0 ? index: tmp;
                h++;
                tmp = index + area;
                if (h < height) index = tmp;
                else h = height -1;
              
            }
            break;
        
        case "hij":

            {
                let tmp = index - length;
                index = tmp < h * area ? index: tmp; 
                tmp = index + 1;  
                index = tmp % length == 0 ? index: tmp;
                h--;
                tmp = index - area;
                if (h < 0) h = 0;
                else index = tmp;
             

            }
            break;

        case "hkl":

            {
                let tmp = index + length;
                index = tmp >= ( h + 1) * area ? index: tmp;
                tmp = index - 1;  
                index = (tmp + 1) % length == 0 ? index: tmp;
                h--;
                tmp = index - area;
                if (h < 0) h = 0;
                else index = tmp;
           

            }
            break;

        case "uij" : 
            {
                let tmp = index - length;
                index = tmp < h * area ? index: tmp; 
                tmp = index + 1;  
                index = tmp % length == 0 ? index: tmp;
                h++;
                tmp = index + area;
                if (h < height) index = tmp;
                else h = height -1;
          
            }
            break;

        case "ArrowUp":
            pitch = viewer.getPitch();
            yaw = viewer.getYaw();

            return;


        case "ArrowDown":
            pitch = viewer.getPitch();
            yaw = viewer.getYaw();


            
            return;   
        case "ArrowLeft":
            pitch = viewer.getPitch();
            yaw = viewer.getYaw();

            return;


        case "ArrowRight":
            pitch = viewer.getPitch();
            yaw = viewer.getYaw();

            return; 

        default:
            return;




    }

   
    console.log(index);
    oldarray= array.slice(0);
    let arr = createVolumeXYZ(index, 3, h);
    for (const a of arr) {
         if (array.indexOf(a)==-1) array.push(a);
      //  if (!array.has(a))  array.add(a);
    }
    
    
    
    //let difference = getDifference(array, oldarray);
   // console.log("dif:", difference);
   
    addToCache2(difference);
    (async function(){
        try {
            var res = await readFromCache(`${basepath}/${index}.jpg`);
            loadScene(res); 
        } catch (error) {
            let res = await addAndReadFromCache(`${basepath}/${index}.jpg`);
            loadScene(res);
        } 
    })()

    // addToCache2(difference);
    // readFromCache(`${basepath}/${index}.jpg`).then((res)=>{
    //     loadScene(res);  
    // });

   
});

function getDifference(setA, setB) {
  return new Set(
    [...setA].filter(element => !setB.has(element))
  );
}


 function loadScene(res) {
 
        viewer.loadScene2({[`${index}`]:res});
        viewer.setPitch(pitch, 0);
        viewer.setYaw(yaw, 0);
        viewer.setHfov(hfov, 0);
  
}

window.addEventListener( 'mousemove', function (event){

    pitch = viewer.getPitch();
    yaw = viewer.getYaw();
   
 //  console.log(pitch, yaw);


}, false );

window.addEventListener("wheel", (event) =>{
    hfov = viewer.getHfov();

}, false);



document.getElementById('pan-up').addEventListener('click', function(e) {
    window.dispatchEvent(new KeyboardEvent('keydown', {'key': 'i'}));
});
document.getElementById('pan-down').addEventListener('click', function(e) {
     window.dispatchEvent(new KeyboardEvent('keydown', {'key': 'k'}));
});
document.getElementById('pan-left').addEventListener('click', function(e) {
    window.dispatchEvent(new KeyboardEvent('keydown', {'key': 'j'}));
});
document.getElementById('pan-right').addEventListener('click', function(e) {
     window.dispatchEvent(new KeyboardEvent('keydown', {'key': 'l'}));
});

function showSpinner() {
  document.getElementById('container').style.display = 'block';
}

function hideSpinner() {
  document.getElementById('container').style.display = 'none';
}

// var loader = document.getElementById('ringloader');
// window.addEventListener("load", function (){
//     loader.style.display="none";
// })

function findKey(pitch, yaw, key) {
    if (yaw > 180) yaw = yaw -360;

    key =  key.replace(/\ı/g, "i");

    if (!(pitch > pitch_thres || pitch < -pitch_thres) && !(yaw > yaw_thres || yaw < -yaw_thres)) {
        

    } else if (pitch > pitch_thres && !(yaw > yaw_thres || yaw < -yaw_thres)  )   {
        if (key=="i") key = "ui";
        else if (key=="j") key = "j";
        else if (key=="k") key = "hk";
        else if (key=="l") key = "l";
    } else if (pitch < -pitch_thres && !(yaw > yaw_thres || yaw < -yaw_thres)  )   {
        if (key=="i") key = "hi";
        else if (key=="j") key = "j";
        else if (key=="k") key = "uk";
        else if (key=="l") key = "l";
    } 
    
    else if (!(pitch > pitch_thres || pitch < -pitch_thres) && (yaw > yaw_thres && yaw < 3*yaw_thres) ){
        if (key=="i") key = "li";
        else if (key=="j") key = "ij";
        else if (key=="k") key = "jk";
        else if (key=="l") key = "kl";
    } else if ( pitch > pitch_thres && (yaw > yaw_thres && yaw < 3*yaw_thres) ) {
        if (key=="i") key = "uli";
        else if (key=="j") key = "ij";
        else if (key=="k") key = "hjk";
        else if (key=="l") key = "kl";
    } else if ( pitch < -pitch_thres && (yaw > yaw_thres && yaw < 3*yaw_thres) ) {
        if (key=="i") key = "hli";
        else if (key=="j") key = "ij";
        else if (key=="k") key = "ujk";
        else if (key=="l") key = "kl";
    }
    
    else if (!(pitch > pitch_thres || pitch < -pitch_thres) && (yaw > 3*yaw_thres && yaw < 5*yaw_thres) ) {
        if (key=="i") key = "l";
        else if (key=="j") key = "i";
        else if (key=="k") key = "j";
        else if (key=="l") key = "k";
    } else if ( pitch > pitch_thres && (yaw > 3*yaw_thres && yaw < 5*yaw_thres) ) {
        if (key=="i") key = "ul";
        else if (key=="j") key = "i";
        else if (key=="k") key = "hj";
        else if (key=="l") key = "k";
    } else if ( pitch < -pitch_thres && (yaw > 3*yaw_thres && yaw < 5*yaw_thres) ) {
        if (key=="i") key = "hl";
        else if (key=="j") key = "i";
        else if (key=="k") key = "uj";
        else if (key=="l") key = "k";
    } 
    
    else if (!(pitch > pitch_thres || pitch < -pitch_thres) && (yaw > 5*yaw_thres && yaw < 7*yaw_thres) ) {
        if (key=="i") key = "kl";
        else if (key=="j") key = "li";
        else if (key=="k") key = "ij";
        else if (key=="l") key = "jk";

    } else if (pitch > pitch_thres  && (yaw > 5*yaw_thres && yaw < 7*yaw_thres)) {
        if (key=="i") key = "ukl";
        else if (key=="j") key = "li";
        else if (key=="k") key = "hij";
        else if (key=="l") key = "jk";
    }  else if (pitch < -pitch_thres  && (yaw > 5*yaw_thres && yaw < 7*yaw_thres)) {
        if (key=="i") key = "hkl";
        else if (key=="j") key = "li";
        else if (key=="k") key = "uij";
        else if (key=="l") key = "jk";

    } 
    
    else if ( !(pitch > pitch_thres || pitch < -pitch_thres) && (yaw > 7*yaw_thres || yaw < -7*yaw_thres)) {
        if (key=="i") key = "k";
        else if (key=="j") key = "l";
        else if (key=="k") key = "i";
        else if (key=="l") key = "j";
    } else if (pitch > pitch_thres  && (yaw > 7*yaw_thres || yaw < -7*yaw_thres)) {
        if (key=="i") key = "uk";
        else if (key=="j") key = "l";
        else if (key=="k") key = "hi";
        else if (key=="l") key = "j";
    } else if (pitch < -pitch_thres  && (yaw > 7*yaw_thres || yaw < -7*yaw_thres)) {
        if (key=="i") key = "hk";
        else if (key=="j") key = "l";
        else if (key=="k") key = "ui";
        else if (key=="l") key = "j";
    }

    else if ( !(pitch > pitch_thres || pitch < -pitch_thres) && (yaw < -5*yaw_thres && yaw > -7*yaw_thres)) {
        if (key=="i") key = "jk";
        else if (key=="j") key = "kl";
        else if (key=="k") key = "li";
        else if (key=="l") key = "ij";
    } else if (pitch > pitch_thres  && (yaw < -5*yaw_thres && yaw > -7*yaw_thres)){
        if (key=="i") key = "ujk";
        else if (key=="j") key = "kl";
        else if (key=="k") key = "hli";
        else if (key=="l") key = "ij";
    } else if (pitch < -pitch_thres  && (yaw < -5*yaw_thres && yaw > -7*yaw_thres)){
        if (key=="i") key = "hjk";
        else if (key=="j") key = "kl";
        else if (key=="k") key = "uli";
        else if (key=="l") key = "ij";
    }

    else if ( !(pitch > pitch_thres || pitch < -pitch_thres) && (yaw < -3*yaw_thres && yaw > -5*yaw_thres)) {
        if (key=="i") key = "j";
        else if (key=="j") key = "k";
        else if (key=="k") key = "l";
        else if (key=="l") key = "i";
    } else if (pitch > pitch_thres  && (yaw < -3*yaw_thres && yaw > -5*yaw_thres)) {
        if (key=="i") key = "uj";
        else if (key=="j") key = "k";
        else if (key=="k") key = "hl";
        else if (key=="l") key = "i";
    } else if (pitch < -pitch_thres  && (yaw < -3*yaw_thres && yaw > -5*yaw_thres)) {
        if (key=="i") key = "hj";
        else if (key=="j") key = "k";
        else if (key=="k") key = "ul";
        else if (key=="l") key = "i";
    }

    else if ( !(pitch > pitch_thres || pitch < -pitch_thres) && (yaw < -yaw_thres && yaw > -3*yaw_thres)) {
        if (key=="i") key = "ij";
        else if (key=="j") key = "jk";
        else if (key=="k") key = "kl";
        else if (key=="l") key = "li";
    } else if (pitch > pitch_thres  && (yaw < -yaw_thres && yaw > -3*yaw_thres)) {
        if (key=="i") key = "uij";
        else if (key=="j") key = "jk";
        else if (key=="k") key = "hkl";
        else if (key=="l") key = "li";
    } else if (pitch < -pitch_thres  && (yaw < -yaw_thres && yaw > -3*yaw_thres)) {
        if (key=="i") key = "hij";
        else if (key=="j") key = "jk";
        else if (key=="k") key = "ukl";
        else if (key=="l") key = "li";

    }
   
    return key;

}


</script>

</body>
</html>